#pragma once
#include <SDL.h>
#include <SDL_image.h>
#include "Board.h"

static const bool tetrominoShapes[7][4][4][4] = {
    //I Piece
    {
        {
            {0,0,0,0},
            {1,1,1,1},
            {0,0,0,0},
            {0,0,0,0},
        },
        {
            {0,0,1,0},
            {0,0,1,0},
            {0,0,1,0},
            {0,0,1,0},
        },
        {
            {0,0,0,0},
            {0,0,0,0},
            {1,1,1,1},
            {0,0,0,0},
        },
        {
            {0,1,0,0},
            {0,1,0,0},
            {0,1,0,0},
            {0,1,0,0},
        },
    },
    //O
    {
        {
            {0,1,1,0},
            {0,1,1,0},
            {0,0,0,0},
            {0,0,0,0},
        },
        {
            {0,1,1,0},
            {0,1,1,0},
            {0,0,0,0},
            {0,0,0,0},
        },
        {
            {0,1,1,0},
            {0,1,1,0},
            {0,0,0,0},
            {0,0,0,0},
        },
        {
            {0,1,1,0},
            {0,1,1,0},
            {0,0,0,0},
            {0,0,0,0},
        },
    },
    //T PIece
    {
        {
            {0,1,0,0},
            {1,1,1,0},
            {0,0,0,0},
            {0,0,0,0},
        },
        {
            {0,1,0,0},
            {0,1,1,0},
            {0,1,0,0},
            {0,0,0,0},
        },
        {
            {0,0,0,0},
            {1,1,1,0},
            {0,1,0,0},
            {0,0,0,0},
        },
        {
            {0,1,0,0},
            {1,1,0,0},
            {0,1,0,0},
            {0,0,0,0},
        },
    },
    //L piece
    {
        {
            {0,0,1,0},
            {1,1,1,0},
            {0,0,0,0},
            {0,0,0,0},
        },
        {
            {0,1,0,0},
            {0,1,0,0},
            {0,1,1,0},
            {0,0,0,0},
        },
        {
            {0,0,0,0},
            {1,1,1,0},
            {1,0,0,0},
            {0,0,0,0},
        },
        {
            {1,1,0,0},
            {0,1,0,0},
            {0,1,0,0},
            {0,0,0,0},
        },
    },
    //J Piece
    {
        {
            {1,0,0,0},
            {1,1,1,0},
            {0,0,0,0},
            {0,0,0,0},
        },
        {
            {0,1,1,0},
            {0,1,0,0},
            {0,1,0,0},
            {0,0,0,0},
        },
        {
            {0,0,0,0},
            {1,1,1,0},
            {0,0,1,0},
            {0,0,0,0},
        },
        {
            {0,1,0,0},
            {0,1,0,0},
            {1,1,0,0},
            {0,0,0,0},
        },
    },
    //S Piece 
    {
        {
            {0,1,1,0},
            {1,1,0,0},
            {0,0,0,0},
            {0,0,0,0},
        },
        {
            {0,1,0,0},
            {0,1,1,0},
            {0,0,1,0},
            {0,0,0,0},
        },
        {
            {0,0,0,0},
            {0,1,1,0},
            {1,1,0,0},
            {0,0,0,0},
        },
        {
            {1,0,0,0},
            {1,1,0,0},
            {0,1,0,0},
            {0,0,0,0},
        },
    },
    //Z Piece
    {
        {
            {1,1,0,0},
            {0,1,1,0},
            {0,0,0,0},
            {0,0,0,0},
        },
        {
            {0,0,1,0},
            {0,1,1,0},
            {0,1,0,0},
            {0,0,0,0},
        },
        {
            {0,0,0,0},
            {1,1,0,0},
            {0,1,1,0},
            {0,0,0,0},
        },
        {
            {0,1,0,0},
            {1,1,0,0},
            {1,0,0,0},
            {0,0,0,0},
        },
    }
};

const int srsKickNormal[8][5][2] = {
    {{0, 0}, {-1, 0}, {-1, 1}, {0, -2}, {-1, -2}}, // 0 -> 1
    {{0, 0}, {1, 0}, {1, -1}, {0, 2}, {1, 2}},    // 1 -> 0
    {{0, 0}, {1, 0}, {1, -1}, {0, 2}, {1, 2}},    // 1 -> 2
    {{0, 0}, {-1, 0}, {-1, 1}, {0, -2}, {-1, -2}},// 2 -> 1
    {{0, 0}, {1, 0}, {1, 1}, {0, -2}, {1, -2}},   // 2 -> 3
    {{0, 0}, {-1, 0}, {-1, -1}, {0, 2}, {-1, 2}}, // 3 -> 2
    {{0, 0}, {-1, 0}, {-1, -1}, {0, 2}, {-1, 2}},// 3 -> 0
    {{0, 0}, {1, 0}, {1, 1}, {0, -2}, {1, -2}}     // 0 -> 3
};

const int srsKickI[8][5][2] = {
    {{0, 0}, {-2, 0}, {1, 0}, {-2, -1}, {1, 2}},  // 0 -> 1
    {{0, 0}, {2, 0}, {-1, 0}, {2, 1}, {-1, -2}},  // 1 -> 0
    {{0, 0}, {-1, 0}, {2, 0}, {-1, 2}, {2, -1}},  // 1 -> 2
    {{0, 0}, {1, 0}, {-2, 0}, {1, -2}, {-2, 1}},  // 2 -> 1
    {{0, 0}, {2, 0}, {-1, 0}, {2, 1}, {-1, -2}},  // 2 -> 3
    {{0, 0}, {-2, 0}, {1, 0}, {-2, -1}, {1, 2}},  // 3 -> 2
    {{0, 0}, {1, 0}, {-2, 0}, {1, -2}, {-2, 1}},  // 3 -> 0
    {{0, 0}, {-1, 0}, {2, 0}, {-1, 2}, {2, -1}}   // 0 -> 3
};

static const int transitionTable[4][2] = {
    {6, 1}, // 0 -> 1 (clockwise), 0 -> 3 (counterclockwise)
    {4, 7}, // 1 -> 2 (clockwise), 1 -> 0 (counterclockwise)
    {2, 5}, // 2 -> 3 (clockwise), 2 -> 1 (counterclockwise)
    {0, 3}  // 3 -> 0 (clockwise), 3 -> 2 (counterclockwise)
};

enum TetrominoType {
	I=0, O=1, T=2, L=3, J=4, S=5, Z=6, None=7
};

class Tetromino
{
public:
	Tetromino(SDL_Renderer* renderer, TetrominoType shape);
	~Tetromino();

	void render(SDL_Renderer* renderer);
	void renderGhostPiece(SDL_Renderer* renderer, Board& board);
	void move(int dx, int dy, Board& board);
	void rotate(bool clockwise, Board& board);
	void hardDrop(Board& board);

	const bool(&getMatrix() const)[4][4]{
		return matrix;
	}

	bool checkIsPlaced() const { return isPlaced; };

	int getX() const;
	int getY() const;

	TetrominoType getShape() const { return shape; };

private:
	SDL_Texture* texture;
	SDL_Texture* ghostTexture;
	bool matrix[4][4];
	int x, y;
	int rotationState;
	bool isPlaced;
	TetrominoType shape;
	uint32_t lockPhase;
};

